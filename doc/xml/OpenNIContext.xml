<Type Name="OpenNIContext" FullName="OpenNIContext">
  <TypeSignature Language="C#" Value="public class OpenNIContext : UnityEngine.MonoBehaviour" />
  <Base>
    <BaseTypeName>UnityEngine.MonoBehaviour</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <block>
OpenNIContext is responsible for initializing and shutting down OpenNI, as well as opening specific OpenNI streams. It is a singleton object and a scene should not have more than one instance of it. An OpenNIContext will be implicitly added to the scene in runtime when using OpenNI functionality, but it can be added explicitly to modify default behavior.</block>
      <block>
OpenNI can be initialized in 3 different ways:
<list type="bullet"><item><term><b>1. Live Sensor</b> - Open the live sensor, and open streams when they are used</term></item><item><term><b>2. Offline File</b> - Open an offline OpenNI file (.oni)</term></item><item><term><b>3. External XML File</b> - Initialize OpenNI from an XML file</term></item></list>
By default the live sensor will be opened.
</block>
    </summary>
    <remarks>
Offline recordings (.oni files) can be created using NIViewer - Part of the  OpenNI package
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenNIContext ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Awake">
      <MemberSignature Language="C#" Value="public void Awake ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public static OpenNI.Context Context { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>OpenNI.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The OpenNI context (OpenNI.NET)</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public OpenNI.DepthGenerator Depth { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>OpenNI.DepthGenerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>OpenNI depth generator (OpenNI.NET) </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static OpenNIContext Instance { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>OpenNIContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Singleton instance of OpenNIContext</summary>
        <value>Singleton</value>
        <remarks />
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LicenseKey">
      <MemberSignature Language="C#" Value="public string LicenseKey;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>License key to use when initializing OpenNI. Default key is taken from OpenNI.org</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LicenseVendor">
      <MemberSignature Language="C#" Value="public string LicenseVendor;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Vendor to use when initializing OpenNI. Default vendor is taken from OpenNI.org</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromRecording">
      <MemberSignature Language="C#" Value="public bool LoadFromRecording;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set to True to initialize OpenNI from a recording (.oni file)</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LoadFromXML">
      <MemberSignature Language="C#" Value="public bool LoadFromXML;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set to True to initialize OpenNI from an external XML file</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mirror">
      <MemberSignature Language="C#" Value="public bool Mirror;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Depth mirror flag</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mirror">
      <MemberSignature Language="C#" Value="public static bool Mirror { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Depth mirror flag</summary>
        <value>True for On, False for Off</value>
      </Docs>
      <AssemblyInfo />
    </Member>
    <Member MemberName="OnApplicationQuit">
      <MemberSignature Language="C#" Value="public void OnApplicationQuit ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNode">
      <MemberSignature Language="C#" Value="public static OpenNI.ProductionNode OpenNode (OpenNI.NodeType nt);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>OpenNI.ProductionNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nt" Type="OpenNI.NodeType" />
      </Parameters>
      <Docs>
        <param name="nt">OpenNI NodeType to open</param>
        <summary>Opens an OpenNI stream of type NodeType. (Creates the ProductionNode if it isn't already open). </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RecordingFilename">
      <MemberSignature Language="C#" Value="public string RecordingFilename;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of offline file to use when LoadFromRecording is set to True</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RecordingFramerate">
      <MemberSignature Language="C#" Value="public float RecordingFramerate;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Framerate to play back an offline file when LoadFromRecording is set to True</summary>
        <remarks />
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XMLFilename">
      <MemberSignature Language="C#" Value="public string XMLFilename;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Filename of external XML file to use when initializing OpenNI</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <AssemblyInfo>
    <AssemblyName>Assembly-CSharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
</Type>
